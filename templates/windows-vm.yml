apiVersion: "{{ api_version_virtual_machine }}"
kind: VirtualMachine
metadata:
  annotations:
{% if template.networks is defined and template.networks|length > 0 %}
    k8s.v1.cni.cncf.io/networks: "{{ template.networks | map(attribute='name') | join(', ') }}"
{% endif %}
    name.os.template.kubevirt.io/win2k12r2: {{ template.name }}
  name: {{ template.name }}
  generation: 2
  namespace: '{{ target_namespace }}'
  labels:
    app: {{ template.name }}
    app_name: {{ template.app_name }}
    role: {{ template.role }}
    os.template.kubevirt.io/win2k12r2: 'true'
{% if template.template is defined %}
    vm.kubevirt.io/template: {{ template.template }}
    vm.kubevirt.io/template-namespace: {{ template_namespace }}
    vm.kubevirt.io/template.revision: '1'
    vm.kubevirt.io/template.version: v{{ win_os_template_version }}
{% endif %}
    workload.template.kubevirt.io/server: 'true'
    os.family: windows
spec:
  dataVolumeTemplates:
    - apiVersion: {{ api_version_dv }}
      kind: DataVolume
      metadata:
        name: {{ template.name }}-disk0
        annotations:
          cdi.kubevirt.io/storage.bind.immediate.requested: 'true'
      spec:
        source:
{% if template.template is defined %}
          pvc:
            namespace: {{ template_namespace }}
            name: {{ dv_template_disk_info.resources[0].metadata.name }}
{% else %}
          blank: {}
{% endif %}
        storage:
          resources:
            requests:
              storage: {{ (template.disks[0].size | default(dv_template_disk_info.resources[0].spec.storage.resources.requests.storage)) | replace('GiB', 'Gi') }}
          storageClassName: {{ pvc_storage_class }}
      status: {}
  runStrategy: Manual
  running: null
  template:
    metadata:
      labels:
        kubevirt.io/domain: {{ template.name }}
        kubevirt.io/size: medium
        vm.kubevirt.io/name: {{ template.name }}
        app: {{ template.name }}
        app_name: {{ template.app_name }}
        role: {{ template.role }}
    spec:
      domain:
        clock:
          timer:
            hpet:
              present: false
            hyperv: {}
            pit:
              tickPolicy: delay
            rtc:
              tickPolicy: catchup
          utc: {}
        cpu:
          sockets: {{ template.cpu }}
{% if template.cores is defined %}
          cores: {{ template.cores }}
{% endif %}
{% if template.threads is defined %}
          threads: {{ template.threads }}
{% endif %}
{% if template.cpu_model is defined and template.cpu_model == 'host-passthrough' %}
          model: {{ template.cpu_model }}
{% endif %}
        devices:
          disks:
            - bootOrder: 1
              disk:
                bus: {{ template.boot_disk_bus | default('virtio') }}
              name: disk0
{% if template.template is defined %}
{% if kubevirt_use_configmap is defined and kubevirt_use_configmap|bool %}
            - bootOrder: 2
              cdrom:
                bus: sata
              name: configmap-volume
{% else %}
            - bootOrder: 2
              cdrom:
                bus: sata
              name: cd-drive-1
{% endif %}
{% else %}
{% if boot_iso_pvc_name is defined and boot_iso_pvc_name|length > 0 %}
            - bootOrder: 2
              cdrom:
                bus: sata
              name: boot-iso
{% endif %}
{% endif %}
          interfaces:
{% if template.networks is defined and template.networks|length > 0 %}
{% for network in template.networks %}
            - bridge: {}
              model: {{ network.model | default('virtio') }}
              name: nic{{ (loop.index-1)|string }}
{% endfor %}
{% else %}
            - bootOrder: 3
              bridge: {}
              model: virtio
              name: nic0
{% endif %}
        features:
          acpi: {}
          apic: {}
          hyperv:
            relaxed: {}
            spinlocks:
              spinlocks: 8191
            vapic: {}
{% if template.efi is defined and template.efi|bool %}
          smm:
            enabled: true
        firmware:
          bootloader:
            efi: {}
{% endif %}
{% if (template.efi is defined and template.efi|bool) or bootloader_efi is defined %}
          smm:
            enabled: true
        firmware:
          bootloader:
{% if bootloader_efi is defined %}
            efi: {{ bootloader_efi }}
{% else %}
            efi: {}
{% endif %}
{% endif %}
        machine:
          type: ''
        resources:
          requests:
            memory: {{ ((template.memory|int) * kubevirt_memory_overcommit_ratio) | int | string }}Mi
        memory:
          guest: {{ template.memory }}Mi
      evictionStrategy: LiveMigrate
      hostname: {{ template.name }}
      networks:
{% if template.networks is defined and template.networks|length > 0 %}
{% for network in template.networks %}
        - multus:
            networkName: {{ network.name }}
          name: nic{{ (loop.index-1)|string }}
{% endfor %}
{% else %}
        - name: nic0
          pod: {}
{% endif %}
      terminationGracePeriodSeconds: 0
      volumes:
        - dataVolume:
            name: {{ template.name }}-disk0
          name: disk0
{% if template.template is defined %}
{% if kubevirt_use_configmap is defined and kubevirt_use_configmap|bool %}
        - name: configmap-volume
          configMap:
            name: '{{ template.name }}-configmap'
{% else %}
        - name: cd-drive-1
          persistentVolumeClaim:
            claimName: {{ iso_pvc_name }}
{% endif %}
{% else %}
{% if boot_iso_pvc_name is defined and boot_iso_pvc_name|length > 0 %}
        - name: boot-iso
          persistentVolumeClaim:
            claimName: {{ boot_iso_pvc_name }}
{% endif %}
{% endif %}