---

- name: fail if no template and disk specified
  fail:
    msg: "{{ at least one disk must be specified when no template is used }}"
  when:
    - template.template is undefined
    - template.disks[0].size is undefined | default(False)

- name: fail if both template and pvc_iso_template is specified
  fail:
    msg: "template and pvc_iso_template are mutually exclusive, only define one of them"
  when:
    - template.template is defined
    - template.pvc_iso_template is defined

- block:
    - name: check if template dv exists
      k8s_info:
        api_version: "{{ api_version_dv }}"
        kind: DataVolume
        name: '{{ template.template }}-template-disk0'
        namespace: '{{ template_namespace }}'
        validate_certs: no
        api_key: "{{ api_key }}"
      register: dv_template_disk_info

    - name: check if template pvc exists
      k8s_info:
        api_version: v1
        kind: PersistentVolumeClaim
        name: '{{ template.template }}-template-disk0'
        namespace: '{{ template_namespace }}'
        validate_certs: no
        api_key: "{{ api_key }}"
      register: pvc_template_disk_info

    - name: fail with message
      fail:
        msg: "data volume/pvc ({{ template.template }}-template-disk0) could not be found, make sure it exists"
      when:
        - ( dv_template_disk_info.resources | default([]) ) | length == 0
        - ( pvc_template_disk_info.resources | default([]) ) | length == 0

    - name: get template info
      k8s_info:
        api_version: template.openshift.io/v1
        kind: template
        name: '{{ template.template }}'
        namespace: '{{ template_namespace }}'
        validate_certs: no
        api_key: "{{ api_key }}"
      register: template_info

    - name: set efi bootloader
      set_fact:
        bootloader_efi: '{{ (template_info.resources[0].objects | json_query(query))[0].spec.template.spec.domain.firmware.bootloader.efi | default(None) }}'
      vars:
        query: "@[?kind=='VirtualMachine']"
      when: ( template_info.resources | default([]) ) | length > 0

  when: template.template is defined

- name: check if template iso pvc exists
  k8s_info:
    api_version: v1
    kind: PersistentVolumeClaim
    name: '{{ template_iso_pvc_name }}'
    namespace: '{{ template_namespace }}'
    validate_certs: no
    api_key: "{{ api_key }}"
  register: template_iso_pvc_info
  when: template.pvc_iso_template is defined

- name: set pvc iso template name
  set_fact:
    boot_iso_pvc_name: '{{ template_iso_pvc_info.resources[0].metadata.name | default(None) }}'

- name: set os distro name
  set_fact:
    distro_name: >-
      {{ pvc_template_disk_info.resources[0].metadata.labels["os.distribution"] |
      default(template_iso_pvc_info.resources[0].metadata.labels["os.distribution"]) |
      default(None) }}

- name: set os type
  set_fact:
    nodes_os_type: >-
      {{ nodes_os_type | default({}) | combine({template.name:template.os_type |
      default(dv_template_disk_info.resources[0].metadata.labels["os.family"]) |
      default(template_iso_pvc_info.resources[0].metadata.labels["os.family"]) |
      default("redhat")}) | lower }}

- name: enable clone role binding
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'clone-role-binding.yml') | from_yaml }}"
    validate_certs: no
    api_key: "{{ api_key }}"
  when:
    - kubevirt_clone_cluster_role_enable
    - template_namespace != target_namespace